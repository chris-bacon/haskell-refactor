Given haskell (Setup with function example):
  f = if n > 3 then 3 else n

Do (Highlight text and run ExtractHaskellFuncton):
  o\<esc>k
  03w
  vwe
  :ExtractHaskellFunction g n\<Enter>

Expect haskell (ExtractHaskellFunction extracts a function correctly):
  f = if g n then 3 else n

  g :: _ -> _
  g n = n > 3

Given haskell (Setup with type example):
  f :: Int -> Maybe Int -> Int

Do (Highlight text and run ExtractHaskellType):
  O\<esc>j
  02w
  v3we
  :ExtractHaskellType IntMaybeInt\<Enter>

Expect haskell (ExtractHaskellType extracts a function correctly):

  type IntMaybeInt = Int -> Maybe Int

  f :: IntMaybeInt -> Int

Given haskell (Setup with multiline function example):
  f = do
    contents <- readFile "test"
    print contents

Do (Highlight text and run ExtractHaskellFuncton):
  2jo\<esc>3k
  02w
  v2jwe
  :ExtractHaskellFunction g\<Enter>

Expect haskell (ExtractHaskellFunction extracts a multiline function correctly):
  f = g

  g :: _
  g = do
    contents <- readFile "test"
    print contents

